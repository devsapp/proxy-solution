'use strict';
var deprecate = require('depd')('cookies');
var Keygrip = require('keygrip');
var http = require('http');
var cache = {};
/**
 * RegExp to match field-content in RFC 7230 sec 3.2
 *
 * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]
 * field-vchar   = VCHAR / obs-text
 * obs-text      = %x80-FF
 */
var fieldContentRegExp = /^[\u0009\u0020-\u007e\u0080-\u00ff]+$/;
/**
 * RegExp to match Same-Site cookie attribute value.
 */
var SAME_SITE_REGEXP = /^(?:lax|none|strict)$/i;
function Cookies(request, response, options) {
    if (!(this instanceof Cookies))
        return new Cookies(request, response, options);
    this.secure = undefined;
    this.request = request;
    this.response = response;
    if (options) {
        if (Array.isArray(options)) {
            // array of key strings
            deprecate('"keys" argument; provide using options {"keys": [...]}');
            this.keys = new Keygrip(options);
        }
        else if (options.constructor && options.constructor.name === 'Keygrip') {
            // any keygrip constructor to allow different versions
            deprecate('"keys" argument; provide using options {"keys": keygrip}');
            this.keys = options;
        }
        else {
            this.keys = Array.isArray(options.keys) ? new Keygrip(options.keys) : options.keys;
            this.secure = options.secure;
        }
    }
}
Cookies.prototype.get = function (name, opts) {
    var sigName = name + ".sig", header, match, value, remote, data, index, signed = opts && opts.signed !== undefined ? opts.signed : !!this.keys;
    header = this.request.headers["cookie"];
    if (!header)
        return;
    match = header.match(getPattern(name));
    if (!match)
        return;
    value = match[1];
    if (!opts || !signed)
        return value;
    remote = this.get(sigName);
    if (!remote)
        return;
    data = name + "=" + value;
    if (!this.keys)
        throw new Error('.keys required for signed cookies');
    index = this.keys.index(data, remote);
    if (index < 0) {
        this.set(sigName, null, { path: "/", signed: false });
    }
    else {
        index && this.set(sigName, this.keys.sign(data), { signed: false });
        return value;
    }
};
Cookies.prototype.set = function (name, value, opts) {
    var res = this.response, headers = res.headersMap ? (res.headersMap["Set-Cookie"] || []) : (res.getHeader("Set-Cookie") || []), secure = this.secure !== undefined ? !!this.secure : false, cookie = new Cookie(name, value, opts), signed = opts && opts.signed !== undefined ? opts.signed : !!this.keys;
    if (typeof headers == "string")
        headers = [headers];
    if (!secure && opts && opts.secure) {
        throw new Error('Cannot send secure cookie over unencrypted connection');
    }
    cookie.secure = opts && opts.secure !== undefined
        ? opts.secure
        : secure;
    if (opts && "secureProxy" in opts) {
        deprecate('"secureProxy" option; use "secure" option, provide "secure" to constructor if needed');
        cookie.secure = opts.secureProxy;
    }
    pushCookie(headers, cookie);
    if (opts && signed) {
        if (!this.keys)
            throw new Error('.keys required for signed cookies');
        cookie.value = this.keys.sign(cookie.toString());
        cookie.name += ".sig";
        pushCookie(headers, cookie);
    }
    var setHeader = res.set ? http.OutgoingMessage.prototype.setHeader : res.setHeader;
    setHeader.call(res, 'Set-Cookie', headers);
    return this;
};
function Cookie(name, value, attrs) {
    if (!fieldContentRegExp.test(name)) {
        throw new TypeError('argument name is invalid');
    }
    if (value && !fieldContentRegExp.test(value)) {
        throw new TypeError('argument value is invalid');
    }
    this.name = name;
    this.value = value || "";
    for (var name_1 in attrs) {
        this[name_1] = attrs[name_1];
    }
    if (!this.value) {
        this.expires = new Date(0);
        this.maxAge = null;
    }
    if (this.path && !fieldContentRegExp.test(this.path)) {
        throw new TypeError('option path is invalid');
    }
    if (this.domain && !fieldContentRegExp.test(this.domain)) {
        throw new TypeError('option domain is invalid');
    }
    if (this.sameSite && this.sameSite !== true && !SAME_SITE_REGEXP.test(this.sameSite)) {
        throw new TypeError('option sameSite is invalid');
    }
}
Cookie.prototype.path = "/";
Cookie.prototype.expires = undefined;
Cookie.prototype.domain = undefined;
Cookie.prototype.httpOnly = true;
Cookie.prototype.sameSite = false;
Cookie.prototype.secure = false;
Cookie.prototype.overwrite = false;
Cookie.prototype.toString = function () {
    return this.name + "=" + this.value;
};
Cookie.prototype.toHeader = function () {
    var header = this.toString();
    if (this.maxAge)
        this.expires = new Date(Date.now() + this.maxAge);
    if (this.path)
        header += "; path=" + this.path;
    if (this.expires)
        header += "; expires=" + this.expires.toUTCString();
    if (this.domain)
        header += "; domain=" + this.domain;
    if (this.sameSite)
        header += "; samesite=" + (this.sameSite === true ? 'strict' : this.sameSite.toLowerCase());
    if (this.secure)
        header += "; secure";
    if (this.httpOnly)
        header += "; httponly";
    return header;
};
// back-compat so maxage mirrors maxAge
Object.defineProperty(Cookie.prototype, 'maxage', {
    configurable: true,
    enumerable: true,
    get: function () { return this.maxAge; },
    set: function (val) { return this.maxAge = val; }
});
deprecate.property(Cookie.prototype, 'maxage', '"maxage"; use "maxAge" instead');
function getPattern(name) {
    if (cache[name])
        return cache[name];
    return cache[name] = new RegExp("(?:^|;) *" +
        name.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&") +
        "=([^;]*)");
}
function pushCookie(headers, cookie) {
    if (cookie.overwrite) {
        for (var i = headers.length - 1; i >= 0; i--) {
            if (headers[i].indexOf(cookie.name + '=') === 0) {
                headers.splice(i, 1);
            }
        }
    }
    headers.push(cookie.toHeader());
}
Cookies.Cookie = Cookie;
module.exports = Cookies;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvY29va2llcy9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUE7QUFFWixJQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUE7QUFDNUMsSUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFBO0FBQ2xDLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQTtBQUM1QixJQUFNLEtBQUssR0FBRyxFQUFFLENBQUE7QUFFaEI7Ozs7OztHQU1HO0FBRUgsSUFBTSxrQkFBa0IsR0FBRyx1Q0FBdUMsQ0FBQztBQUVuRTs7R0FFRztBQUVILElBQU0sZ0JBQWdCLEdBQUcsd0JBQXdCLENBQUE7QUFtQmpELFNBQVMsT0FBTyxDQUFvQixPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU87SUFDMUQsSUFBSSxDQUFDLENBQUMsSUFBSSxZQUFZLE9BQU8sQ0FBQztRQUFFLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQTtJQUM5RSxJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsQ0FBQTtJQUN2QixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQTtJQUN0QixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQTtJQUV4QixJQUFJLE9BQU8sRUFBRTtRQUNULElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUN4Qix1QkFBdUI7WUFDdkIsU0FBUyxDQUFDLHdEQUF3RCxDQUFDLENBQUE7WUFDbkUsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQTtTQUNuQzthQUFNLElBQUksT0FBTyxDQUFDLFdBQVcsSUFBSSxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksS0FBSyxTQUFT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