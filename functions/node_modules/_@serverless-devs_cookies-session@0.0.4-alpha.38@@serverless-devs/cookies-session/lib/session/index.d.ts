/**
 * Module dependencies.
 * @private
 */
declare var Cookies: typeof Cookies;
declare var storeFn: any;
interface SessionContextThis {
    _new: any;
    _val: any;
}
/**
 * Create a new cookie session middleware.
 *
 * @param {object} [options]
 * @param {boolean} [options.httpOnly=true]
 * @param {array} [options.keys]
 * @param {string} [options.name=session] Name of the cookie to use
 * @param {boolean} [options.overwrite=true]
 * @param {string} [options.secret]
 * @param {boolean} [options.signed=true]
 * @return {function} middleware
 * @public
 */
declare var storeSess: any;
declare function cookieSession(options: any): (request: any) => Promise<void>;
/**
 * Session model.
 *
 * @param {Context} ctx
 * @param {Object} obj
 * @private
 */
declare function Session(this: any, ctx: any, obj: any): void;
declare namespace Session {
    var create: (obj: any) => any;
    var deserialize: (str: any) => any;
    var serialize: (sess: any) => string;
}
/**
 * Session context to store metadata.
 *
 * @private
 */
declare function SessionContext(this: SessionContextThis): void;
/**
 * Decode the base64 cookie value to an object.
 *
 * @param {String} string
 * @return {Object}
 * @private
 */
declare function decode(string: any): any;
/**
 * Encode an object into a base64-encoded JSON string.
 *
 * @param {Object} body
 * @return {String}
 * @private
 */
declare function encode(body: any): string;
/**
 * Try getting a session from a cookie.
 * @private
 */
declare function tryGetSession(cookies: any, name: any, opts: any): any;
