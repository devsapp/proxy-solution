/// <reference types="node" />
import { IFcRequest, IFcContext, IdkRequest } from './interface';
/**
 * @description 解析函数的事件
 * exports.initializer = (context, callback)  initializer触发
 * exports.handler = (req, resp, context) http触发
 * exports.handler = (event, context, callback) 事件触发
 * @param first
 * @param second
 * @param thrid
 */
export declare const analizeEvents: (first: any, second: any, thrid?: any) => {
    context: IFcContext;
    callback: Function;
    type: string;
    event?: undefined;
    req?: undefined;
    res?: undefined;
} | {
    event: string;
    context: IFcContext;
    callback: Function;
    type: string;
    req?: undefined;
    res?: undefined;
} | {
    req: IFcRequest;
    res: any;
    context: IFcContext;
    type: string;
    callback?: undefined;
    event?: undefined;
};
export declare const makeResult: ({ res, type, callback, result, error }: IdkRequest) => void;
export declare const analizeRequestParams: ({ internal, res, req, result, context, event, type, }: IdkRequest) => {
    context: IFcContext;
    internal: import("./interface").IMap;
    event?: undefined;
    req?: undefined;
    res?: undefined;
} | {
    event: string | Buffer;
    context: IFcContext;
    internal: import("./interface").IMap;
    req?: undefined;
    res?: undefined;
} | {
    req: IFcRequest;
    res: any;
    context: IFcContext;
    internal: import("./interface").IMap;
    event?: undefined;
};
export declare const getBody: (request: any) => Promise<unknown>;
/**
 * 兼容 method 大小写
 * @param request
 * @param route
 */
export declare const httpRouteParserHandler: (request: IdkRequest, route: {
    [key: string]: any;
}) => Promise<any>;
