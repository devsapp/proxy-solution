"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createGithubHandler = void 0;
// https://docs.github.com/cn/developers/webhooks-and-events/webhooks/about-webhooks
// https://github.com/rvagg/github-webhook-handler
// https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads
var events_1 = __importDefault(require("events"));
var crypto_1 = __importDefault(require("crypto"));
var qs_1 = require("qs");
function findHandler(url, arr) {
    if (!Array.isArray(arr)) {
        return arr;
    }
    var ret = arr[0];
    for (var i = 0; i < arr.length; i++) {
        if (url === arr[i].path) {
            ret = arr[i];
        }
    }
    return ret;
}
function checkType(options) {
    if (typeof options !== 'object') {
        throw new TypeError('must provide an options object');
    }
    var _a = options.secret, secret = _a === void 0 ? '' : _a, _b = options.path, path = _b === void 0 ? '' : _b;
    if (typeof path !== 'string') {
        throw new TypeError('must provide a \'path\' option');
    }
    if (typeof secret !== 'string') {
        throw new TypeError('must provide a \'secret\' option');
    }
}
// 生成令牌
function sign(data, secret) {
    if (secret === void 0) { secret = ''; }
    var hmac = crypto_1.default.createHmac('sha1', secret);
    hmac.update(Buffer.from(data));
    return "sha1=" + hmac.digest('hex');
}
// 校验令牌
function verify(signature, data, secret) {
    if (secret === void 0) { secret = ''; }
    if (!secret)
        return true;
    var sig = Buffer.from(signature);
    var signed = Buffer.from(sign(data, secret));
    if (sig.length !== signed.length) {
        return false;
    }
    return crypto_1.default.timingSafeEqual(sig, signed);
}
var createGithubHandler = function (initOptions) {
    var options;
    // validate type of options
    if (Array.isArray(initOptions)) {
        for (var i = 0; i < initOptions.length; i++) {
            checkType(initOptions[i]);
        }
    }
    else {
        checkType(initOptions);
    }
    var handler = function (req) {
        var events;
        options = findHandler(req.path, initOptions);
        if (typeof options.events === 'string' && options.events !== '*') {
            events = [options.events];
        }
        else if (Array.isArray(options.events) && options.events.indexOf('*') === -1) {
            events = options.events;
        }
        if (req.path !== options.path || req.method !== 'POST') {
            return { code: 404, message: 'The interface does not match github' };
        }
        function hasError(msg) {
            var err = new Error(msg);
            // 与最初设计违背，目前是直接执行，不是通过 emit 事件监听触发
            // handler.emit('err', err, req); //  handler.emit('error') 事件会导致整个流程直接中断抛异常，所以改成了handler.emit('err')
            return { code: 400, message: err.message };
        }
        var sig = req.headers['x-hub-signature'];
        var event = req.headers['x-github-event'];
        var id = req.headers['x-github-delivery'];
        var contentType = req.headers['content-type'];
        if (options.secret && !sig) {
            return hasError('No X-Hub-Signature found on request');
        }
        if (!event) {
            return hasError('No X-Github-Event found on request');
        }
        if (!id) {
            return hasError('No X-Github-Delivery found on request');
        }
        if (events && events.indexOf(event) === -1) {
            return hasError('X-Github-Event is not acceptable');
        }
        var body = req.body;
        var mimePattern = /^application\/x-www-form-urlencoded(;.*)?$/;
        // 令牌校验, 这里的 body 已经在 dk-core 中转为对象
        if (!verify(sig, mimePattern.test(contentType) ? qs_1.stringify(body) : JSON.stringify(body), options.secret)) {
            return hasError('X-Hub-Signature does not match blob signature');
        }
        var emitData = {
            event: event,
            id: id,
            payload: mimePattern.test(contentType) ? JSON.parse(body.payload) : body,
            protocol: req.protocol,
            host: req.headers.host,
            url: req.url,
            path: options.path
        };
        // 与最初设计违背，目前是直接执行，不是通过 emit 事件监听触发
        // handler.emit(event, emitData)
        // handler.emit('event', emitData)
        return { code: 200, message: 'success', data: emitData };
    };
    // make it an EventEmitter
    Object.setPrototypeOf(handler, events_1.default.prototype);
    events_1.default.call(handler);
    handler.sign = sign;
    handler.verify = verify;
    return handler;
};
exports.createGithubHandler = createGithubHandler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2l0aHViSGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2dpdGh1YkhhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsb0ZBQW9GO0FBQ3BGLGtEQUFrRDtBQUNsRCxpR0FBaUc7QUFDakcsa0RBQWtDO0FBQ2xDLGtEQUE0QjtBQUM1Qix5QkFBK0I7QUFFL0IsU0FBUyxXQUFXLENBQUMsR0FBRyxFQUFFLEdBQUc7SUFDM0IsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDdkIsT0FBTyxHQUFHLENBQUE7S0FDWDtJQUVELElBQUksR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQTtJQUNoQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNuQyxJQUFJLEdBQUcsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFO1lBQ3ZCLEdBQUcsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUE7U0FDYjtLQUNGO0lBRUQsT0FBTyxHQUFHLENBQUE7QUFDWixDQUFDO0FBRUQsU0FBUyxTQUFTLENBQUMsT0FBTztJQUN4QixJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsRUFBRTtRQUMvQixNQUFNLElBQUksU0FBUyxDQUFDLGdDQUFnQyxDQUFDLENBQUE7S0FDdEQ7SUFFTyxJQUFBLEtBQTJCLE9BQU8sT0FBdkIsRUFBWCxNQUFNLG1CQUFHLEVBQUUsS0FBQSxFQUFFLEtBQWMsT0FBTyxLQUFaLEVBQVQsSUFBSSxtQkFBRyxFQUFFLEtBQUEsQ0FBYTtJQUUzQyxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtRQUM1QixNQUFNLElBQUksU0FBUyxDQUFDLGdDQUFnQyxDQUFDLENBQUE7S0FDdEQ7SUFFRCxJQUFJLE9BQU8sTUFB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