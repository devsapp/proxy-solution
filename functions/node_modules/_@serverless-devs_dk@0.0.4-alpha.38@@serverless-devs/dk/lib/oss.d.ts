interface IOnEvent {
    bucketName: string;
    events: string[];
    filter: {
        prefix: string;
        suffix: string;
    };
}
interface IOnObject {
    bucketName: string;
    events?: string[];
    filter: {
        prefix: string;
        suffix: string;
    };
}
interface IOSSConfig<IOss> {
    handler: Function | Object;
    oss: IOss;
}
export declare const oss: {
    onEvent: (config: IOSSConfig<IOnEvent>) => {
        (first: any, second: any, thrid?: any): Promise<import("@serverless-devs/dk-core/lib/interface").IdkRequest>;
        use(middlewares: any): any;
        applyMiddleware(middleware: any): any;
        initializerHandler: any;
        initializer(initializerPlugin: any): any;
        before(beforeMiddleware: any): any;
        after(afterMiddleware: any): any;
        onError(onErrorMiddleware: any): any;
        __middlewares: {
            before: any[];
            after: any[];
            onError: any[];
            initializer: any[];
        };
    };
    onObjectCreated: (config: IOSSConfig<IOnObject>) => {
        (first: any, second: any, thrid?: any): Promise<import("@serverless-devs/dk-core/lib/interface").IdkRequest>;
        use(middlewares: any): any;
        applyMiddleware(middleware: any): any;
        initializerHandler: any;
        initializer(initializerPlugin: any): any;
        before(beforeMiddleware: any): any;
        after(afterMiddleware: any): any;
        onError(onErrorMiddleware: any): any;
        __middlewares: {
            before: any[];
            after: any[];
            onError: any[];
            initializer: any[];
        };
    };
    onObjectRemoved: (config: IOSSConfig<IOnObject>) => {
        (first: any, second: any, thrid?: any): Promise<import("@serverless-devs/dk-core/lib/interface").IdkRequest>;
        use(middlewares: any): any;
        applyMiddleware(middleware: any): any;
        initializerHandler: any;
        initializer(initializerPlugin: any): any;
        before(beforeMiddleware: any): any;
        after(afterMiddleware: any): any;
        onError(onErrorMiddleware: any): any;
        __middlewares: {
            before: any[];
            after: any[];
            onError: any[];
            initializer: any[];
        };
    };
};
export {};
